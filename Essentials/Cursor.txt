Prompt:

You are working on a React Native + Expo app for field Surveyors using Prisma + Express on the backend. The app already has working login, registration, dashboard, profile, and a dynamic Survey Form that supports Residential, Non-Residential, and Mixed assessments.

Now, you need to redesign the data flow and offline handling for survey submission. Implement the following changes to the existing codebase without breaking any existing core functionality, and in full alignment with the current architecture:

🔧 Features to Implement:

🛑 1. Stop Online Submission on Submit

- Modify the current Submit Survey functionality.

- Instead of sending the survey to the backend, save it in AsyncStorage using a format like:

{
  id: string, // unique local ID like survey_<timestamp>_<random>
  data: CreateSurveyDto,
  synced: false,
  createdAt: ISODate,
  surveyType: 'Residential' | 'Non-Residential' | 'Mixed'
}
- Store it under the key unsyncedSurveys.

💾 2. Implement Local Master Data Caching

- During login or initial app load, fetch all master data (like propertyTypes, roadTypes, etc.) from the backend, and cache it in AsyncStorage using key masterData.

await AsyncStorage.setItem('masterData', JSON.stringify(fetchedData));

- Update all dropdown components to read from this local masterData cache.

🧭 3. Fetch and Store Assignments

- After successful login, fetch SurveyorAssignment data.

- Store it in AsyncStorage as userAssignments.

- Modify survey flow to:

- Detect if multiple assignments exist.

- Prompt surveyor to choose one assignment before proceeding to Survey Form every time.

- Once selected, auto-fill and lock ULB, Zone, Ward.

- Mohalla dropdown should show only mohallas from the selected assignment (which are stored as an array of UUIDs).

🚫 4. Offline-First Design
- After login, the entire app (survey creation, form filling, saving, etc.) should work without internet.

- Only Sync Survey feature requires network access.

☁️ 5. Implement Sync Data Logic

- Use the existing "Sync Data" button in the Surveyor Dashboard.

- It should:

  - Fetch unsynced surveys from AsyncStorage.

  - For each:

    - Send to /surveys/addSurvey API with auth token.

    - If successful:

      - Mark survey as synced: true and remove from AsyncStorage.

      - Or update local status for partial sync support.

  - Notify surveyor of how many surveys synced successfully or failed.

✅ 6. Keep Only Relevant Data in AsyncStorage
- Keep AsyncStorage size in check (~5MB limit).

- After each successful sync, remove synced survey records from unsyncedSurveys.

- Compress or flatten records if needed.

📁 File Modifications (Structure-Aware):
Frontend (React Native)

- src/screens/SurveyForm.tsx → Modify save & submit flow to use local storage.

- src/screens/SurveyorDashboard.tsx → Add Sync Data button and status indicator.

- src/screens/LoginScreen.tsx → Store user, assignments, masterData.

- src/utils/storage.ts → Add helper functions for AsyncStorage handling:

  - saveSurveyLocally()

  - getUnsyncedSurveys()

  - syncSurveysToBackend()

- src/components/FormDropdown.tsx → Support loading options from masterData cache.

- src/navigation/AppNavigator.tsx → Handle assignment selection screen if multiple assignments exist.

Backend (Express + Prisma)

- No changes to API logic unless you want to validate duplicate survey IDs.

- Ensure /surveys/addSurvey accepts fully-formed survey DTO as it already does.

📦 Tech Stack Reminder:

- Frontend: React Native + Expo + AsyncStorage

- Backend: Express + Prisma + PostgreSQL (Supabase)

- Database: UUID usage for IDs

- Auth: JWT-based

- Master Data: Cached locally

- Survey Assignments: Referenced via SurveyorAssignment table with Mohalla array (UUID[])

🚫 DO NOT:

- Do not run any migration or DB commands automatically — output migration scripts if needed and let the user apply them manually.

- Do not submit surveys immediately after clicking “Submit Survey”.

- Do not assume network availability during survey filling.

- Do not hardcode backend URLs — use EXPO_PUBLIC_API_BASE_URL.

✅ DO:

- Respect the 5MB AsyncStorage limit.

- Use the selected assignment context throughout the survey.

- Support full offline mode post-login
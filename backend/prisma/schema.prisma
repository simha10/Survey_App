/// Added reverted statuses for better traceability
/// REVERTED_TO_SUPERVISOR, REVERTED_TO_ADMIN
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UlbMaster {
  ulbId         String           @id @default(uuid())
  ulbName       String           @db.VarChar(100)
  isActive      Boolean          @default(false)
  description   String?
  createdAt     DateTime         @default(now())
  ulbCode       String?          @db.VarChar(20)
  updatedAt     DateTime         @updatedAt
  surveyDetails SurveyDetails[]
  ulbZoneMaps   UlbZoneMapping[]
}

model ZoneMaster {
  zoneId        String            @id @default(uuid())
  zoneNumber    String            @db.VarChar(50)
  isActive      Boolean           @default(false)
  description   String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  zoneName      String?           @db.VarChar(100)
  surveyDetails SurveyDetails[]
  ulbZoneMaps   UlbZoneMapping[]
  zoneWardMaps  ZoneWardMapping[]
}

model WardMaster {
  wardId              String               @id @default(dbgenerated("gen_random_uuid()"))
  isActive            Boolean              @default(false)
  wardName            String               @db.VarChar(100)
  description         String?
  createdAt           DateTime             @default(now())
  newWardNumber       String               @unique @db.VarChar(20)
  oldWardNumber       String?              @db.VarChar(20)
  updatedAt           DateTime             @updatedAt
  wardCode            String?              @db.VarChar(20)
  supervisors         Supervisors[]
  surveyDetails       SurveyDetails[]
  surveyorAssignments SurveyorAssignment[]
  wardMohallaMaps     WardMohallaMapping[]
  wardStatusMaps      WardStatusMapping[]
  zoneWardMaps        ZoneWardMapping[]

  @@index([oldWardNumber])
  @@index([wardName])
}

model MohallaMaster {
  mohallaId       String               @id @default(uuid())
  mohallaName     String               @db.VarChar(100)
  isActive        Boolean              @default(false)
  description     String?
  createdAt       DateTime             @default(now())
  mohallaCode     String?              @db.VarChar(20)
  updatedAt       DateTime             @updatedAt
  surveyDetails   SurveyDetails[]
  wardMohallaMaps WardMohallaMapping[]

  @@index([mohallaName])
}

model ResponseTypeMaster {
  responseTypeName String            @db.VarChar(50)
  isActive         Boolean           @default(false)
  description      String?
  responseTypeId   Int               @id @default(autoincrement())
  propertyDetails  PropertyDetails[]
}

model PropertyTypeMaster {
  propertyTypeName String            @db.Char(50)
  isActive         Boolean           @default(false)
  description      String?
  propertyTypeId   Int               @id @default(autoincrement())
  locationDetails  LocationDetails[]
}

model RespondentStatusMaster {
  respondentStatusName String            @db.VarChar(20)
  isActive             Boolean           @default(false)
  description          String?
  respondentStatusId   Int               @id @default(autoincrement())
  propertyDetails      PropertyDetails[]
}

model RoadTypeMaster {
  roadTypeName    String            @db.VarChar(50)
  isActive        Boolean           @default(false)
  description     String?
  roadTypeId      Int               @id @default(autoincrement())
  locationDetails LocationDetails[]
}

model ConstructionTypeMaster {
  constructionTypeName String            @db.VarChar(50)
  isActive             Boolean           @default(false)
  description          String?
  constructionTypeId   Int               @id @default(autoincrement())
  locationDetails      LocationDetails[]
}

model WaterSourceMaster {
  waterSourceName String         @db.VarChar(50)
  isActive        Boolean        @default(false)
  description     String?
  waterSourceId   Int            @id @default(autoincrement())
  otherDetails    OtherDetails[]
}

model DisposalTypeMaster {
  disposalTypeName String         @db.VarChar(50)
  isActive         Boolean        @default(false)
  description      String?
  disposalTypeId   Int            @id @default(autoincrement())
  otherDetails     OtherDetails[]
}

model FloorMaster {
  floorNumberName                   String                             @db.VarChar(50)
  isActive                          Boolean                            @default(true)
  description                       String?
  floorNumberId                     Int                                @id @default(autoincrement())
  nonResidentialPropertyAssessments NonResidentialPropertyAssessment[]
  residentialPropertyAssessments    ResidentialPropertyAssessment[]
}

model NrPropertyCategoryMaster {
  propertyCategoryNumber            Int
  propertyCategoryName              String                             @db.VarChar(200)
  isActive                          Boolean                            @default(false)
  description                       String?
  createdAt                         DateTime                           @default(now())
  propertyCategoryId                Int                                @id @default(autoincrement())
  nonResidentialPropertyAssessments NonResidentialPropertyAssessment[]
  subCategories                     NrPropertySubCategoryMaster[]
}

model NrPropertySubCategoryMaster {
  subCategoryNumber                 Int
  subCategoryName                   String                             @db.VarChar(100)
  isActive                          Boolean                            @default(false)
  description                       String?
  createdAt                         DateTime                           @default(now())
  subCategoryId                     Int                                @id @default(autoincrement())
  propertyCategoryId                Int
  nonResidentialPropertyAssessments NonResidentialPropertyAssessment[]
  propertyCategory                  NrPropertyCategoryMaster           @relation(fields: [propertyCategoryId], references: [propertyCategoryId])

  @@index([propertyCategoryId])
  @@index([isActive])
}

model ConstructionNatureMaster {
  constructionNatureName            String                             @db.VarChar(50)
  isActive                          Boolean                            @default(false)
  description                       String?
  constructionNatureId              Int                                @id @default(autoincrement())
  nonResidentialPropertyAssessments NonResidentialPropertyAssessment[]
  residentialPropertyAssessments    ResidentialPropertyAssessment[]
}

model SurveyTypeMaster {
  surveyTypeName String          @db.Char(20)
  isActive       Boolean         @default(true)
  description    String?
  surveyTypeId   Int             @id @default(autoincrement())
  surveyDetails  SurveyDetails[]
}

model OccupancyStatusMaster {
  occupancyStatusName               String                             @db.VarChar(50)
  isActive                          Boolean                            @default(true)
  description                       String?
  occupancyStatusId                 Int                                @id @default(autoincrement())
  nonResidentialPropertyAssessments NonResidentialPropertyAssessment[]
  residentialPropertyAssessments    ResidentialPropertyAssessment[]
}

model SurveyStatusMaster {
  statusName               String                @db.VarChar(50)
  isActive                 Boolean               @default(true)
  description              String?
  surveyStatusId           Int                   @id @default(autoincrement())
  surveyStatusMapsReverted SurveyStatusMapping[] @relation("RevertedFrom")
  surveyStatusMaps         SurveyStatusMapping[]

/// Seeded QC status stages for workflow
/// OFFICE_QC_PENDING, OFFICE_QC_DONE, RI_QC_PENDING, RI_QC_DONE, FINAL_QC_PENDING, FINAL_QC_DONE, REVERTED_TO_OFFICE_QC
}

model WardStatusMaster {
  statusName     String              @db.VarChar(50)
  isActive       Boolean             @default(true)
  description    String?
  wardStatusId   Int                 @id @default(autoincrement())
  wardStatusMaps WardStatusMapping[]
}

model UsersMaster {
  userId                        String                @id @default(uuid())
  username                      String                @db.Char(50)
  password                      String                @db.VarChar(200)
  mobileNumber                  String?               @db.VarChar(20)
  isCreatedAt                   DateTime              @default(now())
  isActive                      Boolean               @default(false)
  description                   String?
  name                          String?               @db.VarChar(100)
  admins                        Admins?
  auditLogs                     AuditLog[]
  qcRecords                     QCRecord[]
  qcSectionRecords              QCSectionRecord[]
  sessions                      Session[]
  supervisors                   Supervisors?
  uploadedSurveys               SurveyDetails[]       @relation("UsersMasterToSurveyDetails")
  surveyStatusMaps              SurveyStatusMapping[]
  surveyorAssignmentsAssignedBy SurveyorAssignment[]  @relation("AssignedBy")
  surveyorAssignments           SurveyorAssignment[]
  surveyors                     Surveyors?
  userRoleMaps                  UserRoleMapping[]
  wardStatusMaps                WardStatusMapping[]

  @@index([username])
  @@index([mobileNumber])
}

model RolePermissionMaster {
  roleId       String            @id @default(uuid())
  roleName     String            @unique @db.VarChar(30)
  isActive     Boolean           @default(false)
  description  String?
  userRoleMaps UserRoleMapping[]
}

model UlbZoneMapping {
  ulbZoneMapId String      @id @default(uuid())
  ulbId        String
  zoneId       String
  isActive     Boolean     @default(true)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  surveyors    Surveyors[]
  ulb          UlbMaster   @relation(fields: [ulbId], references: [ulbId])
  zone         ZoneMaster  @relation(fields: [zoneId], references: [zoneId])

  @@unique([ulbId, zoneId])
}

model ZoneWardMapping {
  zoneWardMapId String      @id @default(uuid())
  zoneId        String
  wardId        String
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  surveyors     Surveyors[]
  ward          WardMaster  @relation(fields: [wardId], references: [wardId])
  zone          ZoneMaster  @relation(fields: [zoneId], references: [zoneId])

  @@unique([zoneId, wardId])
}

model WardMohallaMapping {
  wardMohallaMapId String        @id @default(uuid())
  wardId           String
  mohallaId        String
  isActive         Boolean       @default(true)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  surveyors        Surveyors[]
  mohalla          MohallaMaster @relation(fields: [mohallaId], references: [mohallaId])
  ward             WardMaster    @relation(fields: [wardId], references: [wardId])

  @@unique([wardId, mohallaId])
}

model SurveyorAssignment {
  assignmentId   String      @id @default(uuid())
  userId         String
  assignmentType String      @db.VarChar(10)
  wardId         String
  assignedById   String
  isActive       Boolean     @default(true)
  mohallaIds     String[]    @db.VarChar(36)
  assignedBy     UsersMaster @relation("AssignedBy", fields: [assignedById], references: [userId])
  user           UsersMaster @relation(fields: [userId], references: [userId])
  ward           WardMaster  @relation(fields: [wardId], references: [wardId])

  @@unique([userId, wardId])
  @@index([userId])
  @@index([wardId])
  @@index([isActive])
}

model WardStatusMapping {
  wardId       String
  changedById  String
  isActive     Boolean          @default(true)
  mappingId    String           @id @default(uuid())
  wardStatusId Int
  changedBy    UsersMaster      @relation(fields: [changedById], references: [userId])
  ward         WardMaster       @relation(fields: [wardId], references: [wardId])
  status       WardStatusMaster @relation(fields: [wardStatusId], references: [wardStatusId])

  @@unique([wardId, wardStatusId])
  @@index([wardId])
  @@index([wardStatusId])
}

model SurveyStatusMapping {
  statusMappingId  String              @id @default(uuid())
  surveyUniqueCode String              @db.Uuid
  changedById      String
  isActive         Boolean             @default(true)
  surveyStatusId   Int
  revertedFromId   Int?
  changedBy        UsersMaster         @relation(fields: [changedById], references: [userId])
  revertedFrom     SurveyStatusMaster? @relation("RevertedFrom", fields: [revertedFromId], references: [surveyStatusId])
  status           SurveyStatusMaster  @relation(fields: [surveyStatusId], references: [surveyStatusId])
  survey           SurveyDetails       @relation(fields: [surveyUniqueCode], references: [surveyUniqueCode])

  @@unique([surveyUniqueCode, surveyStatusId])
  @@index([surveyUniqueCode])
  @@index([surveyStatusId])
  @@index([changedById])
}

model UserRoleMapping {
  userRoleMapId String               @id @default(uuid())
  userId        String
  roleId        String
  isActive      Boolean              @default(true)
  role          RolePermissionMaster @relation(fields: [roleId], references: [roleId])
  user          UsersMaster          @relation(fields: [userId], references: [userId])

  @@unique([userId, roleId])
  @@index([userId])
  @@index([roleId])
}

model Session {
  sessionId  String      @id @default(uuid())
  userId     String
  loginTime  DateTime
  logoutTime DateTime
  isActive   Boolean     @default(true)
  user       UsersMaster @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([userId])
}

model Surveyors {
  userId           String              @id
  surveyorName     String              @db.VarChar(50)
  username         String              @db.VarChar(50)
  password         String              @db.VarChar(250)
  wardMohallaMapId String?
  zoneWardMapId    String?
  ulbZoneMapId     String?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  ulbZoneMap       UlbZoneMapping?     @relation(fields: [ulbZoneMapId], references: [ulbZoneMapId])
  user             UsersMaster         @relation(fields: [userId], references: [userId])
  wardMohallaMap   WardMohallaMapping? @relation(fields: [wardMohallaMapId], references: [wardMohallaMapId])
  zoneWardMap      ZoneWardMapping?    @relation(fields: [zoneWardMapId], references: [zoneWardMapId])
}

model Supervisors {
  userId         String      @id
  supervisorName String      @db.VarChar(50)
  username       String      @db.VarChar(50)
  password       String      @db.VarChar(250)
  wardId         String?
  user           UsersMaster @relation(fields: [userId], references: [userId])
  ward           WardMaster? @relation(fields: [wardId], references: [wardId])
}

model Admins {
  userId    String      @id
  adminName String      @db.VarChar(50)
  username  String      @db.VarChar(50)
  password  String      @db.VarChar(250)
  user      UsersMaster @relation(fields: [userId], references: [userId])
}

model SurveyDetails {
  surveyUniqueCode                  String                             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  uploadedById                      String
  ulbId                             String
  zoneId                            String
  wardId                            String
  mohallaId                         String
  surveyTypeId                      Int
  entryDate                         DateTime                           @db.Timestamp(0)
  parcelId                          Int?
  mapId                             Int
  gisId                             String                             @db.VarChar(12)
  subGisId                          String?                            @db.VarChar(15)
  createdAt                         DateTime                           @default(now())
  updatedAt                         DateTime                           @updatedAt
  locationDetails                   LocationDetails?
  nonResidentialPropertyAssessments NonResidentialPropertyAssessment[]
  otherDetails                      OtherDetails?
  ownerDetails                      OwnerDetails?
  propertyAttachments               PropertyAttachmentDetails[]
  propertyDetails                   PropertyDetails?
  qcRecords                         QCRecord[]
  qcSectionRecords                  QCSectionRecord[]
  residentialPropertyAssessments    ResidentialPropertyAssessment[]
  mohalla                           MohallaMaster                      @relation(fields: [mohallaId], references: [mohallaId])
  surveyType                        SurveyTypeMaster                   @relation(fields: [surveyTypeId], references: [surveyTypeId])
  ulb                               UlbMaster                          @relation(fields: [ulbId], references: [ulbId])
  uploadedBy                        UsersMaster                        @relation("UsersMasterToSurveyDetails", fields: [uploadedById], references: [userId])
  ward                              WardMaster                         @relation(fields: [wardId], references: [wardId])
  zone                              ZoneMaster                         @relation(fields: [zoneId], references: [zoneId])
  surveyStatusMaps                  SurveyStatusMapping[]

  @@index([uploadedById])
  @@index([createdAt])
  @@index([ulbId])
  @@index([zoneId])
  @@index([wardId])
  @@index([mohallaId])
}

model PropertyDetails {
  surveyUniqueCode              String                 @id @db.Uuid
  responseTypeId                Int
  oldHouseNumber                String?                @db.VarChar(15)
  electricityConsumerName       String?                @db.VarChar(50)
  waterSewerageConnectionNumber String?                @db.VarChar(50)
  respondentName                String                 @db.Char(50)
  respondentStatusId            Int
  respondentStatus              RespondentStatusMaster @relation(fields: [respondentStatusId], references: [respondentStatusId])
  responseType                  ResponseTypeMaster     @relation(fields: [responseTypeId], references: [responseTypeId])
  survey                        SurveyDetails          @relation(fields: [surveyUniqueCode], references: [surveyUniqueCode])
}

model OwnerDetails {
  surveyUniqueCode  String        @id @db.Uuid
  ownerName         String        @db.VarChar(50)
  fatherHusbandName String        @db.VarChar(50)
  mobileNumber      String?       @db.VarChar(20)
  aadharNumber      String?       @db.Char(12)
  survey            SurveyDetails @relation(fields: [surveyUniqueCode], references: [surveyUniqueCode])
}

model LocationDetails {
  surveyUniqueCode   String                 @id @db.Uuid
  propertyLatitude   Decimal?               @db.Decimal(9, 6)
  propertyLongitude  Decimal?               @db.Decimal(9, 6)
  assessmentYear     String                 @db.VarChar(20)
  propertyTypeId     Int?
  buildingName       String?
  roadTypeId         Int
  constructionYear   String                 @db.VarChar(20)
  constructionTypeId Int
  addressRoadName    String
  locality           String?
  pinCode            Int
  landmark           String?
  fourWayEast        String?
  fourWayWest        String?
  fourWayNorth       String?
  fourWaySouth       String?
  newWardNumber      String                 @db.VarChar(20)
  constructionType   ConstructionTypeMaster @relation(fields: [constructionTypeId], references: [constructionTypeId])
  propertyType       PropertyTypeMaster?    @relation(fields: [propertyTypeId], references: [propertyTypeId])
  roadType           RoadTypeMaster         @relation(fields: [roadTypeId], references: [roadTypeId])
  survey             SurveyDetails          @relation(fields: [surveyUniqueCode], references: [surveyUniqueCode])
}

model OtherDetails {
  surveyUniqueCode            String             @id @db.Uuid
  waterSourceId               Int
  rainWaterHarvestingSystem   String             @db.Char(3)
  plantation                  String?            @db.Char(3)
  parking                     String?            @db.Char(3)
  pollution                   String?            @db.Char(3)
  pollutionMeasurementTaken   String?
  waterSupplyWithin200Meters  String             @db.Char(3)
  sewerageLineWithin100Meters String             @db.Char(3)
  disposalTypeId              Int
  totalPlotArea               Float
  builtupAreaOfGroundFloor    Float
  remarks                     String?
  disposalType                DisposalTypeMaster @relation(fields: [disposalTypeId], references: [disposalTypeId])
  survey                      SurveyDetails      @relation(fields: [surveyUniqueCode], references: [surveyUniqueCode])
  waterSource                 WaterSourceMaster  @relation(fields: [waterSourceId], references: [waterSourceId])
}

model ResidentialPropertyAssessment {
  floorAssessmentId     String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  surveyUniqueCode      String                   @db.Uuid
  floorNumberId         Int
  occupancyStatusId     Int
  constructionNatureId  Int
  coveredArea           Decimal                  @db.Decimal(10, 2)
  allRoomVerandaArea    Decimal?                 @db.Decimal(10, 2)
  allBalconyKitchenArea Decimal?                 @db.Decimal(10, 2)
  allGarageArea         Decimal?                 @db.Decimal(10, 2)
  carpetArea            Decimal                  @db.Decimal(10, 2)
  constructionNature    ConstructionNatureMaster @relation(fields: [constructionNatureId], references: [constructionNatureId])
  floorMaster           FloorMaster              @relation(fields: [floorNumberId], references: [floorNumberId])
  occupancyStatus       OccupancyStatusMaster    @relation(fields: [occupancyStatusId], references: [occupancyStatusId])
  survey                SurveyDetails            @relation(fields: [surveyUniqueCode], references: [surveyUniqueCode])

  @@index([surveyUniqueCode])
  @@index([floorNumberId])
}

model NonResidentialPropertyAssessment {
  floorAssessmentId    String                      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  surveyUniqueCode     String                      @db.Uuid
  floorNumberId        Int
  nrPropertyCategoryId Int
  nrSubCategoryId      Int
  establishmentName    String
  licenseNo            String?                     @db.VarChar(20)
  licenseExpiryDate    DateTime?
  occupancyStatusId    Int
  constructionNatureId Int
  builtupArea          Float
  constructionNature   ConstructionNatureMaster    @relation(fields: [constructionNatureId], references: [constructionNatureId])
  floorMaster          FloorMaster                 @relation(fields: [floorNumberId], references: [floorNumberId])
  nrPropertyCategory   NrPropertyCategoryMaster    @relation(fields: [nrPropertyCategoryId], references: [propertyCategoryId])
  nrSubCategory        NrPropertySubCategoryMaster @relation(fields: [nrSubCategoryId], references: [subCategoryId])
  occupancyStatus      OccupancyStatusMaster       @relation(fields: [occupancyStatusId], references: [occupancyStatusId])
  survey               SurveyDetails               @relation(fields: [surveyUniqueCode], references: [surveyUniqueCode])

  @@index([nrPropertyCategoryId])
  @@index([nrSubCategoryId])
  @@index([surveyUniqueCode])
  @@index([occupancyStatusId])
}

model PropertyAttachmentDetails {
  surveyImagesId   String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  surveyUniqueCode String        @db.Uuid
  image1Url        String?       @db.VarChar(50)
  image2Url        String?       @db.VarChar(50)
  image3Url        String?       @db.VarChar(50)
  image4Url        String?       @db.VarChar(50)
  image5Url        String?       @db.VarChar(50)
  image6Url        String?       @db.VarChar(50)
  image7Url        String?       @db.VarChar(50)
  image8Url        String?       @db.VarChar(50)
  image9Url        String?       @db.VarChar(50)
  image10Url       String?       @db.VarChar(50)
  survey           SurveyDetails @relation(fields: [surveyUniqueCode], references: [surveyUniqueCode])

  @@index([surveyImagesId])
}

model QCRecord {
  surveyUniqueCode String        @db.Uuid
  qcLevel          Int
  qcStatus         QCStatusEnum
  reviewedById     String
  remarks          String?
  reviewedAt       DateTime      @default(now())
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  RIRemark         String?
  errorType        QCErrorType?
  gisTeamRemark    String?
  isError          Boolean       @default(false)
  surveyTeamRemark String?
  qcRecordId       String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  reviewedBy       UsersMaster   @relation(fields: [reviewedById], references: [userId])
  survey           SurveyDetails @relation(fields: [surveyUniqueCode], references: [surveyUniqueCode], onDelete: Cascade)

  @@unique([surveyUniqueCode, qcLevel])
  @@index([surveyUniqueCode])
  @@index([reviewedById])
  @@index([qcStatus])
  @@index([qcLevel])
}

/// Records per-section QC outcomes to support partial progression across levels
model QCSectionRecord {
  qcSectionRecordId String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  surveyUniqueCode  String       @db.Uuid
  qcLevel           Int
  sectionKey        String       @db.VarChar(64)
  qcStatus          QCStatusEnum
  remarks           String?
  reviewedById      String
  reviewedAt        DateTime     @default(now())

  reviewedBy UsersMaster   @relation(fields: [reviewedById], references: [userId])
  survey     SurveyDetails @relation(fields: [surveyUniqueCode], references: [surveyUniqueCode], onDelete: Cascade)

  @@unique([surveyUniqueCode, qcLevel, sectionKey])
  @@index([surveyUniqueCode])
  @@index([qcLevel])
  @@index([sectionKey])
}

model AuditLog {
  actionId  String      @id @default(uuid())
  userId    String
  action    String
  old_value String?
  new_value String?
  createdAt DateTime    @default(now())
  user      UsersMaster @relation(fields: [userId], references: [userId])
}

enum YesNo {
  YES
  NO
}

enum AssignmentType {
  PRIMARY
  SECONDARY
}

enum ResponseType {
  OLD_PROPERTY
  NEW_PROPERTY
  DOOR_LOCK
  ACCESS_DENIED
}

enum PropertyType {
  HOUSE
  FLAT
  PLOT_LAND
}

enum RespondentStatus {
  OWNER
  OCCUPIER
  TENANT
  EMPLOYEE
  OTHER
}

enum RoadType {
  WIDTH_LESS_THAN_3M
  WIDTH_3_TO_11M
  WIDTH_12_TO_24M
  WIDTH_MORE_THAN_24M
}

enum ConstructionType {
  CONSTRUCTED
  NOT_CONSTRUCTED
  UNDER_CONSTRUCTION
}

enum WaterSource {
  OWN
  MUNICIPAL
  PUBLIC_TAP_WITHIN_100_YARDS
  PUBLIC_TAP_MORE_THAN_100_YARDS
}

enum DisposalType {
  SEWERAGE
  SEPTIC_TANK
}

enum ConstructionNature {
  PUCCKAA_RCC_RB_ROOF
  OTHER_PUCCKAA
  KUCCHHAA
}

enum SurveyType {
  RESIDENTIAL
  NON_RESIDENTIAL
  MIX
}

enum OccupancyStatus {
  SELF_OCCUPIED
  RENTED
  MIX
}

enum RolePermission {
  SUPER_ADMIN
  ADMIN
  SUPERVISOR
  SURVEYOR
}

enum QCStatusEnum {
  PENDING
  APPROVED
  REJECTED
  DUPLICATE
  NEEDS_REVISION
}

enum QCErrorType {
  MISSING
  DUPLICATE
  OTHER
  NONE
}


/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.0
 * Query Engine version: 9c30299f5a0ea26a96790e13f796dc6094db3173
 */
Prisma.prismaVersion = {
  client: "6.11.0",
  engine: "9c30299f5a0ea26a96790e13f796dc6094db3173"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UlbMasterScalarFieldEnum = {
  ulbId: 'ulbId',
  ulbName: 'ulbName',
  isActive: 'isActive',
  description: 'description',
  createdAt: 'createdAt',
  ulbCode: 'ulbCode',
  updatedAt: 'updatedAt'
};

exports.Prisma.ZoneMasterScalarFieldEnum = {
  zoneId: 'zoneId',
  zoneNumber: 'zoneNumber',
  isActive: 'isActive',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  zoneName: 'zoneName'
};

exports.Prisma.WardMasterScalarFieldEnum = {
  wardId: 'wardId',
  isActive: 'isActive',
  wardName: 'wardName',
  description: 'description',
  createdAt: 'createdAt',
  newWardNumber: 'newWardNumber',
  oldWardNumber: 'oldWardNumber',
  updatedAt: 'updatedAt',
  wardCode: 'wardCode'
};

exports.Prisma.MohallaMasterScalarFieldEnum = {
  mohallaId: 'mohallaId',
  mohallaName: 'mohallaName',
  isActive: 'isActive',
  description: 'description',
  createdAt: 'createdAt',
  mohallaCode: 'mohallaCode',
  updatedAt: 'updatedAt'
};

exports.Prisma.ResponseTypeMasterScalarFieldEnum = {
  responseTypeName: 'responseTypeName',
  isActive: 'isActive',
  description: 'description',
  responseTypeId: 'responseTypeId'
};

exports.Prisma.PropertyTypeMasterScalarFieldEnum = {
  propertyTypeName: 'propertyTypeName',
  isActive: 'isActive',
  description: 'description',
  propertyTypeId: 'propertyTypeId'
};

exports.Prisma.RespondentStatusMasterScalarFieldEnum = {
  respondentStatusName: 'respondentStatusName',
  isActive: 'isActive',
  description: 'description',
  respondentStatusId: 'respondentStatusId'
};

exports.Prisma.RoadTypeMasterScalarFieldEnum = {
  roadTypeName: 'roadTypeName',
  isActive: 'isActive',
  description: 'description',
  roadTypeId: 'roadTypeId'
};

exports.Prisma.ConstructionTypeMasterScalarFieldEnum = {
  constructionTypeName: 'constructionTypeName',
  isActive: 'isActive',
  description: 'description',
  constructionTypeId: 'constructionTypeId'
};

exports.Prisma.WaterSourceMasterScalarFieldEnum = {
  waterSourceName: 'waterSourceName',
  isActive: 'isActive',
  description: 'description',
  waterSourceId: 'waterSourceId'
};

exports.Prisma.DisposalTypeMasterScalarFieldEnum = {
  disposalTypeName: 'disposalTypeName',
  isActive: 'isActive',
  description: 'description',
  disposalTypeId: 'disposalTypeId'
};

exports.Prisma.FloorMasterScalarFieldEnum = {
  floorNumberName: 'floorNumberName',
  isActive: 'isActive',
  description: 'description',
  floorNumberId: 'floorNumberId'
};

exports.Prisma.NrPropertyCategoryMasterScalarFieldEnum = {
  propertyCategoryNumber: 'propertyCategoryNumber',
  propertyCategoryName: 'propertyCategoryName',
  isActive: 'isActive',
  description: 'description',
  createdAt: 'createdAt',
  propertyCategoryId: 'propertyCategoryId'
};

exports.Prisma.NrPropertySubCategoryMasterScalarFieldEnum = {
  subCategoryNumber: 'subCategoryNumber',
  subCategoryName: 'subCategoryName',
  isActive: 'isActive',
  description: 'description',
  createdAt: 'createdAt',
  subCategoryId: 'subCategoryId',
  propertyCategoryId: 'propertyCategoryId'
};

exports.Prisma.ConstructionNatureMasterScalarFieldEnum = {
  constructionNatureName: 'constructionNatureName',
  isActive: 'isActive',
  description: 'description',
  constructionNatureId: 'constructionNatureId'
};

exports.Prisma.SurveyTypeMasterScalarFieldEnum = {
  surveyTypeName: 'surveyTypeName',
  isActive: 'isActive',
  description: 'description',
  surveyTypeId: 'surveyTypeId'
};

exports.Prisma.OccupancyStatusMasterScalarFieldEnum = {
  occupancyStatusName: 'occupancyStatusName',
  isActive: 'isActive',
  description: 'description',
  occupancyStatusId: 'occupancyStatusId'
};

exports.Prisma.SurveyStatusMasterScalarFieldEnum = {
  statusName: 'statusName',
  isActive: 'isActive',
  description: 'description',
  surveyStatusId: 'surveyStatusId'
};

exports.Prisma.WardStatusMasterScalarFieldEnum = {
  statusName: 'statusName',
  isActive: 'isActive',
  description: 'description',
  wardStatusId: 'wardStatusId'
};

exports.Prisma.UsersMasterScalarFieldEnum = {
  userId: 'userId',
  username: 'username',
  password: 'password',
  mobileNumber: 'mobileNumber',
  isCreatedAt: 'isCreatedAt',
  isActive: 'isActive',
  description: 'description',
  name: 'name'
};

exports.Prisma.RolePermissionMasterScalarFieldEnum = {
  roleId: 'roleId',
  roleName: 'roleName',
  isActive: 'isActive',
  description: 'description'
};

exports.Prisma.UlbZoneMappingScalarFieldEnum = {
  ulbZoneMapId: 'ulbZoneMapId',
  ulbId: 'ulbId',
  zoneId: 'zoneId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ZoneWardMappingScalarFieldEnum = {
  zoneWardMapId: 'zoneWardMapId',
  zoneId: 'zoneId',
  wardId: 'wardId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WardMohallaMappingScalarFieldEnum = {
  wardMohallaMapId: 'wardMohallaMapId',
  wardId: 'wardId',
  mohallaId: 'mohallaId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SurveyorAssignmentScalarFieldEnum = {
  assignmentId: 'assignmentId',
  userId: 'userId',
  assignmentType: 'assignmentType',
  wardId: 'wardId',
  mohallaId: 'mohallaId',
  wardMohallaMapId: 'wardMohallaMapId',
  assignedById: 'assignedById',
  isActive: 'isActive'
};

exports.Prisma.WardStatusMappingScalarFieldEnum = {
  wardId: 'wardId',
  changedById: 'changedById',
  isActive: 'isActive',
  mappingId: 'mappingId',
  wardStatusId: 'wardStatusId'
};

exports.Prisma.SurveyStatusMappingScalarFieldEnum = {
  statusMappingId: 'statusMappingId',
  surveyUniqueCode: 'surveyUniqueCode',
  changedById: 'changedById',
  isActive: 'isActive',
  surveyStatusId: 'surveyStatusId',
  revertedFromId: 'revertedFromId'
};

exports.Prisma.UserRoleMappingScalarFieldEnum = {
  userRoleMapId: 'userRoleMapId',
  userId: 'userId',
  roleId: 'roleId',
  isActive: 'isActive'
};

exports.Prisma.SessionScalarFieldEnum = {
  sessionId: 'sessionId',
  userId: 'userId',
  loginTime: 'loginTime',
  logoutTime: 'logoutTime',
  isActive: 'isActive'
};

exports.Prisma.SurveyorsScalarFieldEnum = {
  userId: 'userId',
  surveyorName: 'surveyorName',
  username: 'username',
  password: 'password',
  wardMohallaMapId: 'wardMohallaMapId',
  zoneWardMapId: 'zoneWardMapId',
  ulbZoneMapId: 'ulbZoneMapId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SupervisorsScalarFieldEnum = {
  userId: 'userId',
  supervisorName: 'supervisorName',
  username: 'username',
  password: 'password',
  wardId: 'wardId'
};

exports.Prisma.AdminsScalarFieldEnum = {
  userId: 'userId',
  adminName: 'adminName',
  username: 'username',
  password: 'password'
};

exports.Prisma.SurveyDetailsScalarFieldEnum = {
  surveyUniqueCode: 'surveyUniqueCode',
  uploadedById: 'uploadedById',
  ulbId: 'ulbId',
  zoneId: 'zoneId',
  wardId: 'wardId',
  mohallaId: 'mohallaId',
  surveyTypeId: 'surveyTypeId',
  entryDate: 'entryDate',
  parcelId: 'parcelId',
  mapId: 'mapId',
  gisId: 'gisId',
  subGisId: 'subGisId',
  isSynced: 'isSynced',
  syncStatus: 'syncStatus',
  lastSyncAttempt: 'lastSyncAttempt',
  syncErrorMessage: 'syncErrorMessage',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PropertyDetailsScalarFieldEnum = {
  surveyUniqueCode: 'surveyUniqueCode',
  responseTypeId: 'responseTypeId',
  oldHouseNumber: 'oldHouseNumber',
  electricityConsumerName: 'electricityConsumerName',
  waterSewerageConnectionNumber: 'waterSewerageConnectionNumber',
  respondentName: 'respondentName',
  respondentStatusId: 'respondentStatusId'
};

exports.Prisma.OwnerDetailsScalarFieldEnum = {
  surveyUniqueCode: 'surveyUniqueCode',
  ownerName: 'ownerName',
  fatherHusbandName: 'fatherHusbandName',
  mobileNumber: 'mobileNumber',
  aadharNumber: 'aadharNumber'
};

exports.Prisma.LocationDetailsScalarFieldEnum = {
  surveyUniqueCode: 'surveyUniqueCode',
  propertyLatitude: 'propertyLatitude',
  propertyLongitude: 'propertyLongitude',
  assessmentYear: 'assessmentYear',
  propertyTypeId: 'propertyTypeId',
  buildingName: 'buildingName',
  roadTypeId: 'roadTypeId',
  constructionYear: 'constructionYear',
  constructionTypeId: 'constructionTypeId',
  addressRoadName: 'addressRoadName',
  locality: 'locality',
  pinCode: 'pinCode',
  landmark: 'landmark',
  fourWayEast: 'fourWayEast',
  fourWayWest: 'fourWayWest',
  fourWayNorth: 'fourWayNorth',
  fourWaySouth: 'fourWaySouth',
  newWardNumber: 'newWardNumber'
};

exports.Prisma.OtherDetailsScalarFieldEnum = {
  surveyUniqueCode: 'surveyUniqueCode',
  waterSourceId: 'waterSourceId',
  rainWaterHarvestingSystem: 'rainWaterHarvestingSystem',
  plantation: 'plantation',
  parking: 'parking',
  pollution: 'pollution',
  pollutionMeasurementTaken: 'pollutionMeasurementTaken',
  waterSupplyWithin200Meters: 'waterSupplyWithin200Meters',
  sewerageLineWithin100Meters: 'sewerageLineWithin100Meters',
  disposalTypeId: 'disposalTypeId',
  totalPlotArea: 'totalPlotArea',
  builtupAreaOfGroundFloor: 'builtupAreaOfGroundFloor',
  remarks: 'remarks'
};

exports.Prisma.ResidentialPropertyAssessmentScalarFieldEnum = {
  floorAssessmentId: 'floorAssessmentId',
  surveyUniqueCode: 'surveyUniqueCode',
  floorNumberId: 'floorNumberId',
  occupancyStatusId: 'occupancyStatusId',
  constructionNatureId: 'constructionNatureId',
  coveredArea: 'coveredArea',
  allRoomVerandaArea: 'allRoomVerandaArea',
  allBalconyKitchenArea: 'allBalconyKitchenArea',
  allGarageArea: 'allGarageArea',
  carpetArea: 'carpetArea'
};

exports.Prisma.NonResidentialPropertyAssessmentScalarFieldEnum = {
  floorAssessmentId: 'floorAssessmentId',
  surveyUniqueCode: 'surveyUniqueCode',
  floorNumberId: 'floorNumberId',
  nrPropertyCategoryId: 'nrPropertyCategoryId',
  nrSubCategoryId: 'nrSubCategoryId',
  establishmentName: 'establishmentName',
  licenseNo: 'licenseNo',
  licenseExpiryDate: 'licenseExpiryDate',
  occupancyStatusId: 'occupancyStatusId',
  constructionNatureId: 'constructionNatureId',
  builtupArea: 'builtupArea'
};

exports.Prisma.PropertyAttachmentDetailsScalarFieldEnum = {
  surveyUniqueCode: 'surveyUniqueCode',
  image1Url: 'image1Url',
  image2Url: 'image2Url',
  image3Url: 'image3Url',
  image4Url: 'image4Url',
  image5Url: 'image5Url',
  image6Url: 'image6Url',
  image7Url: 'image7Url',
  image8Url: 'image8Url',
  image9Url: 'image9Url',
  image10Url: 'image10Url'
};

exports.Prisma.QCRecordScalarFieldEnum = {
  qcRecordId: 'qcRecordId',
  surveyUniqueCode: 'surveyUniqueCode',
  qcLevel: 'qcLevel',
  qcStatus: 'qcStatus',
  reviewedById: 'reviewedById',
  remarks: 'remarks',
  reviewedAt: 'reviewedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  actionId: 'actionId',
  userId: 'userId',
  action: 'action',
  old_value: 'old_value',
  new_value: 'new_value',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.SyncStatusEnum = exports.$Enums.SyncStatusEnum = {
  PENDING: 'PENDING',
  SYNCED: 'SYNCED',
  FAILED: 'FAILED',
  CONFLICT: 'CONFLICT'
};

exports.QCStatusEnum = exports.$Enums.QCStatusEnum = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  DUPLICATE: 'DUPLICATE',
  NEEDS_REVISION: 'NEEDS_REVISION'
};

exports.Prisma.ModelName = {
  UlbMaster: 'UlbMaster',
  ZoneMaster: 'ZoneMaster',
  WardMaster: 'WardMaster',
  MohallaMaster: 'MohallaMaster',
  ResponseTypeMaster: 'ResponseTypeMaster',
  PropertyTypeMaster: 'PropertyTypeMaster',
  RespondentStatusMaster: 'RespondentStatusMaster',
  RoadTypeMaster: 'RoadTypeMaster',
  ConstructionTypeMaster: 'ConstructionTypeMaster',
  WaterSourceMaster: 'WaterSourceMaster',
  DisposalTypeMaster: 'DisposalTypeMaster',
  FloorMaster: 'FloorMaster',
  NrPropertyCategoryMaster: 'NrPropertyCategoryMaster',
  NrPropertySubCategoryMaster: 'NrPropertySubCategoryMaster',
  ConstructionNatureMaster: 'ConstructionNatureMaster',
  SurveyTypeMaster: 'SurveyTypeMaster',
  OccupancyStatusMaster: 'OccupancyStatusMaster',
  SurveyStatusMaster: 'SurveyStatusMaster',
  WardStatusMaster: 'WardStatusMaster',
  UsersMaster: 'UsersMaster',
  RolePermissionMaster: 'RolePermissionMaster',
  UlbZoneMapping: 'UlbZoneMapping',
  ZoneWardMapping: 'ZoneWardMapping',
  WardMohallaMapping: 'WardMohallaMapping',
  SurveyorAssignment: 'SurveyorAssignment',
  WardStatusMapping: 'WardStatusMapping',
  SurveyStatusMapping: 'SurveyStatusMapping',
  UserRoleMapping: 'UserRoleMapping',
  Session: 'Session',
  Surveyors: 'Surveyors',
  Supervisors: 'Supervisors',
  Admins: 'Admins',
  SurveyDetails: 'SurveyDetails',
  PropertyDetails: 'PropertyDetails',
  OwnerDetails: 'OwnerDetails',
  LocationDetails: 'LocationDetails',
  OtherDetails: 'OtherDetails',
  ResidentialPropertyAssessment: 'ResidentialPropertyAssessment',
  NonResidentialPropertyAssessment: 'NonResidentialPropertyAssessment',
  PropertyAttachmentDetails: 'PropertyAttachmentDetails',
  QCRecord: 'QCRecord',
  AuditLog: 'AuditLog'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
